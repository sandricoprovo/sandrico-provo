# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Admin {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input AdminWhereUniqueInput {
  id: ID
  email: String
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  isAdmin: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input AdminOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AdminUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
}

input AdminUpdateArgs {
  where: AdminWhereUniqueInput!
  data: AdminUpdateInput!
}

input AdminCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
}

type User {
  id: ID!
  name: String
  title: String
  resume: File
  links(
    where: ExternalLinkWhereInput! = {}
    orderBy: [ExternalLinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ExternalLink!]
  linksCount(where: ExternalLinkWhereInput! = {}): Int
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  resume: FileWhereInput
  links: ExternalLinkManyRelationFilter
}

input ExternalLinkManyRelationFilter {
  every: ExternalLinkWhereInput
  some: ExternalLinkWhereInput
  none: ExternalLinkWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
}

input UserUpdateInput {
  name: String
  title: String
  resume: FileRelateToOneForUpdateInput
  links: ExternalLinkRelateToManyForUpdateInput
}

input FileRelateToOneForUpdateInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
}

input ExternalLinkRelateToManyForUpdateInput {
  disconnect: [ExternalLinkWhereUniqueInput!]
  set: [ExternalLinkWhereUniqueInput!]
  create: [ExternalLinkCreateInput!]
  connect: [ExternalLinkWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  title: String
  resume: FileRelateToOneForCreateInput
  links: ExternalLinkRelateToManyForCreateInput
}

input FileRelateToOneForCreateInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
}

input ExternalLinkRelateToManyForCreateInput {
  create: [ExternalLinkCreateInput!]
  connect: [ExternalLinkWhereUniqueInput!]
}

type File {
  id: ID!
  name: String
  file: FileFieldOutput
}

interface FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input FileWhereUniqueInput {
  id: ID
}

type LocalFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type CloudFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IDFilter
  name: StringFilter
}

input FileOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input FileUpdateInput {
  name: String
  file: FileFieldInput
}

input FileFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input FileUpdateArgs {
  where: FileWhereUniqueInput!
  data: FileUpdateInput!
}

input FileCreateInput {
  name: String
  file: FileFieldInput
}

type ExternalLink {
  id: ID!
  name: String
  platform: String
  link: String
}

input ExternalLinkWhereUniqueInput {
  id: ID
}

input ExternalLinkWhereInput {
  AND: [ExternalLinkWhereInput!]
  OR: [ExternalLinkWhereInput!]
  NOT: [ExternalLinkWhereInput!]
  id: IDFilter
  name: StringFilter
  platform: StringNullableFilter
  link: StringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ExternalLinkOrderByInput {
  id: OrderDirection
  name: OrderDirection
  platform: OrderDirection
  link: OrderDirection
}

input ExternalLinkUpdateInput {
  name: String
  platform: String
  link: String
}

input ExternalLinkUpdateArgs {
  where: ExternalLinkWhereUniqueInput!
  data: ExternalLinkUpdateInput!
}

input ExternalLinkCreateInput {
  name: String
  platform: String
  link: String
}

type Project {
  id: ID!
  name: String
  content: Project_content_Document
  creator(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  creatorCount(where: UserWhereInput! = {}): Int
  techStack: String
  image: ImageFieldOutput
  links(
    where: ExternalLinkWhereInput! = {}
    orderBy: [ExternalLinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ExternalLink!]
  linksCount(where: ExternalLinkWhereInput! = {}): Int
}

type Project_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ProjectWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  creator: UserManyRelationFilter
  techStack: StringFilter
  links: ExternalLinkManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  techStack: OrderDirection
}

input ProjectUpdateInput {
  name: String
  content: JSON
  creator: UserRelateToManyForUpdateInput
  techStack: String
  image: ImageFieldInput
  links: ExternalLinkRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  name: String
  content: JSON
  creator: UserRelateToManyForCreateInput
  techStack: String
  image: ImageFieldInput
  links: ExternalLinkRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  status: PostStatusType
  content: Post_content_Document
  publishDate: DateTime
  creator: User
  link(
    where: ExternalLinkWhereInput! = {}
    orderBy: [ExternalLinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ExternalLink!]
  linkCount(where: ExternalLinkWhereInput! = {}): Int
}

enum PostStatusType {
  draft
  published
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: PostStatusTypeNullableFilter
  publishDate: DateTimeNullableFilter
  creator: UserWhereInput
  link: ExternalLinkManyRelationFilter
}

input PostStatusTypeNullableFilter {
  equals: PostStatusType
  in: [PostStatusType!]
  notIn: [PostStatusType!]
  not: PostStatusTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: PostStatusType
  content: JSON
  publishDate: DateTime
  creator: UserRelateToOneForUpdateInput
  link: ExternalLinkRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: PostStatusType
  content: JSON
  publishDate: DateTime
  creator: UserRelateToOneForCreateInput
  link: ExternalLinkRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Content {
  id: ID!
  name: String
  subHeader: String
  text: Content_text_Document
}

type Content_text_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ContentWhereUniqueInput {
  id: ID
}

input ContentWhereInput {
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
  id: IDFilter
  name: StringFilter
  subHeader: StringFilter
}

input ContentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  subHeader: OrderDirection
}

input ContentUpdateInput {
  name: String
  subHeader: String
  text: JSON
}

input ContentUpdateArgs {
  where: ContentWhereUniqueInput!
  data: ContentUpdateInput!
}

input ContentCreateInput {
  name: String
  subHeader: String
  text: JSON
}

type Section {
  id: ID!
  name: String
  page: String
  header: String
  subHeader: String
  content(
    where: ContentWhereInput! = {}
    orderBy: [ContentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Content!]
  contentCount(where: ContentWhereInput! = {}): Int
  files(
    where: FileWhereInput! = {}
    orderBy: [FileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [File!]
  filesCount(where: FileWhereInput! = {}): Int
  cta: String
}

input SectionWhereUniqueInput {
  id: ID
}

input SectionWhereInput {
  AND: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  NOT: [SectionWhereInput!]
  id: IDFilter
  name: StringFilter
  page: StringFilter
  header: StringFilter
  subHeader: StringFilter
  content: ContentManyRelationFilter
  files: FileManyRelationFilter
  cta: StringFilter
}

input ContentManyRelationFilter {
  every: ContentWhereInput
  some: ContentWhereInput
  none: ContentWhereInput
}

input FileManyRelationFilter {
  every: FileWhereInput
  some: FileWhereInput
  none: FileWhereInput
}

input SectionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  page: OrderDirection
  header: OrderDirection
  subHeader: OrderDirection
  cta: OrderDirection
}

input SectionUpdateInput {
  name: String
  page: String
  header: String
  subHeader: String
  content: ContentRelateToManyForUpdateInput
  files: FileRelateToManyForUpdateInput
  cta: String
}

input ContentRelateToManyForUpdateInput {
  disconnect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  create: [ContentCreateInput!]
  connect: [ContentWhereUniqueInput!]
}

input FileRelateToManyForUpdateInput {
  disconnect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input SectionUpdateArgs {
  where: SectionWhereUniqueInput!
  data: SectionUpdateInput!
}

input SectionCreateInput {
  name: String
  page: String
  header: String
  subHeader: String
  content: ContentRelateToManyForCreateInput
  files: FileRelateToManyForCreateInput
  cta: String
}

input ContentRelateToManyForCreateInput {
  create: [ContentCreateInput!]
  connect: [ContentWhereUniqueInput!]
}

input FileRelateToManyForCreateInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

type NavigationLink {
  id: ID!
  label: String
}

input NavigationLinkWhereUniqueInput {
  id: ID
}

input NavigationLinkWhereInput {
  AND: [NavigationLinkWhereInput!]
  OR: [NavigationLinkWhereInput!]
  NOT: [NavigationLinkWhereInput!]
  id: IDFilter
  label: StringFilter
}

input NavigationLinkOrderByInput {
  id: OrderDirection
  label: OrderDirection
}

input NavigationLinkUpdateInput {
  label: String
}

input NavigationLinkUpdateArgs {
  where: NavigationLinkWhereUniqueInput!
  data: NavigationLinkUpdateInput!
}

input NavigationLinkCreateInput {
  label: String
}

type Header {
  id: ID!
  logo: String
  label: String
  links(
    where: NavigationLinkWhereInput! = {}
    orderBy: [NavigationLinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [NavigationLink!]
  linksCount(where: NavigationLinkWhereInput! = {}): Int
}

input HeaderWhereUniqueInput {
  id: ID
}

input HeaderWhereInput {
  AND: [HeaderWhereInput!]
  OR: [HeaderWhereInput!]
  NOT: [HeaderWhereInput!]
  id: IDFilter
  logo: StringFilter
  label: StringFilter
  links: NavigationLinkManyRelationFilter
}

input NavigationLinkManyRelationFilter {
  every: NavigationLinkWhereInput
  some: NavigationLinkWhereInput
  none: NavigationLinkWhereInput
}

input HeaderOrderByInput {
  id: OrderDirection
  logo: OrderDirection
  label: OrderDirection
}

input HeaderUpdateInput {
  logo: String
  label: String
  links: NavigationLinkRelateToManyForUpdateInput
}

input NavigationLinkRelateToManyForUpdateInput {
  disconnect: [NavigationLinkWhereUniqueInput!]
  set: [NavigationLinkWhereUniqueInput!]
  create: [NavigationLinkCreateInput!]
  connect: [NavigationLinkWhereUniqueInput!]
}

input HeaderUpdateArgs {
  where: HeaderWhereUniqueInput!
  data: HeaderUpdateInput!
}

input HeaderCreateInput {
  logo: String
  label: String
  links: NavigationLinkRelateToManyForCreateInput
}

input NavigationLinkRelateToManyForCreateInput {
  create: [NavigationLinkCreateInput!]
  connect: [NavigationLinkWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin
  createAdmins(data: [AdminCreateInput!]!): [Admin]
  updateAdmin(where: AdminWhereUniqueInput!, data: AdminUpdateInput!): Admin
  updateAdmins(data: [AdminUpdateArgs!]!): [Admin]
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteAdmins(where: [AdminWhereUniqueInput!]!): [Admin]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createFile(data: FileCreateInput!): File
  createFiles(data: [FileCreateInput!]!): [File]
  updateFile(where: FileWhereUniqueInput!, data: FileUpdateInput!): File
  updateFiles(data: [FileUpdateArgs!]!): [File]
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFiles(where: [FileWhereUniqueInput!]!): [File]
  createExternalLink(data: ExternalLinkCreateInput!): ExternalLink
  createExternalLinks(data: [ExternalLinkCreateInput!]!): [ExternalLink]
  updateExternalLink(
    where: ExternalLinkWhereUniqueInput!
    data: ExternalLinkUpdateInput!
  ): ExternalLink
  updateExternalLinks(data: [ExternalLinkUpdateArgs!]!): [ExternalLink]
  deleteExternalLink(where: ExternalLinkWhereUniqueInput!): ExternalLink
  deleteExternalLinks(where: [ExternalLinkWhereUniqueInput!]!): [ExternalLink]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(
    where: ProjectWhereUniqueInput!
    data: ProjectUpdateInput!
  ): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createContent(data: ContentCreateInput!): Content
  createContents(data: [ContentCreateInput!]!): [Content]
  updateContent(
    where: ContentWhereUniqueInput!
    data: ContentUpdateInput!
  ): Content
  updateContents(data: [ContentUpdateArgs!]!): [Content]
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteContents(where: [ContentWhereUniqueInput!]!): [Content]
  createSection(data: SectionCreateInput!): Section
  createSections(data: [SectionCreateInput!]!): [Section]
  updateSection(
    where: SectionWhereUniqueInput!
    data: SectionUpdateInput!
  ): Section
  updateSections(data: [SectionUpdateArgs!]!): [Section]
  deleteSection(where: SectionWhereUniqueInput!): Section
  deleteSections(where: [SectionWhereUniqueInput!]!): [Section]
  createNavigationLink(data: NavigationLinkCreateInput!): NavigationLink
  createNavigationLinks(data: [NavigationLinkCreateInput!]!): [NavigationLink]
  updateNavigationLink(
    where: NavigationLinkWhereUniqueInput!
    data: NavigationLinkUpdateInput!
  ): NavigationLink
  updateNavigationLinks(data: [NavigationLinkUpdateArgs!]!): [NavigationLink]
  deleteNavigationLink(where: NavigationLinkWhereUniqueInput!): NavigationLink
  deleteNavigationLinks(
    where: [NavigationLinkWhereUniqueInput!]!
  ): [NavigationLink]
  createHeader(data: HeaderCreateInput!): Header
  createHeaders(data: [HeaderCreateInput!]!): [Header]
  updateHeader(where: HeaderWhereUniqueInput!, data: HeaderUpdateInput!): Header
  updateHeaders(data: [HeaderUpdateArgs!]!): [Header]
  deleteHeader(where: HeaderWhereUniqueInput!): Header
  deleteHeaders(where: [HeaderWhereUniqueInput!]!): [Header]
  endSession: Boolean!
  authenticateAdminWithPassword(
    email: String!
    password: String!
  ): AdminAuthenticationWithPasswordResult
}

union AdminAuthenticationWithPasswordResult =
    AdminAuthenticationWithPasswordSuccess
  | AdminAuthenticationWithPasswordFailure

type AdminAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Admin!
}

type AdminAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  admins(
    where: AdminWhereInput! = {}
    orderBy: [AdminOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Admin!]
  admin(where: AdminWhereUniqueInput!): Admin
  adminsCount(where: AdminWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  files(
    where: FileWhereInput! = {}
    orderBy: [FileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [File!]
  file(where: FileWhereUniqueInput!): File
  filesCount(where: FileWhereInput! = {}): Int
  externalLinks(
    where: ExternalLinkWhereInput! = {}
    orderBy: [ExternalLinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ExternalLink!]
  externalLink(where: ExternalLinkWhereUniqueInput!): ExternalLink
  externalLinksCount(where: ExternalLinkWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  contents(
    where: ContentWhereInput! = {}
    orderBy: [ContentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Content!]
  content(where: ContentWhereUniqueInput!): Content
  contentsCount(where: ContentWhereInput! = {}): Int
  sections(
    where: SectionWhereInput! = {}
    orderBy: [SectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Section!]
  section(where: SectionWhereUniqueInput!): Section
  sectionsCount(where: SectionWhereInput! = {}): Int
  navigationLinks(
    where: NavigationLinkWhereInput! = {}
    orderBy: [NavigationLinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [NavigationLink!]
  navigationLink(where: NavigationLinkWhereUniqueInput!): NavigationLink
  navigationLinksCount(where: NavigationLinkWhereInput! = {}): Int
  headers(
    where: HeaderWhereInput! = {}
    orderBy: [HeaderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Header!]
  header(where: HeaderWhereUniqueInput!): Header
  headersCount(where: HeaderWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = Admin

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
